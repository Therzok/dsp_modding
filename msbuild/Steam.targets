<Project>
  <PropertyGroup>
    <!-- Shared cache file between all projects -->
    <SteamGameCacheFile>$(MSBuildThisFileDirectory)\SteamGameCache.txt</SteamGameCacheFile>
    
    <SteamGameInstallLocation Condition=" '$(SteamGameInstallLocation)' == '' AND Exists('$(SteamGameCacheFile)')">$([System.IO.File]::ReadAllText('$(SteamGameCacheFile)'))</SteamGameInstallLocation>
    <SteamGameInstallLocation>$([MSBuild]::EnsureTrailingSlash('$(SteamGameInstallLocation.TrimEnd())'))</SteamGameInstallLocation>
  </PropertyGroup>
  
  <UsingTask TaskName="FindSteamGameInstallLocation"
             TaskFactory="RoslynCodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <SteamLocation ParameterType="System.String" Required="true" />
      <GameId ParameterType="System.Int32" Required="true" />
      <Result ParameterType="System.String" Output="true" />
    </ParameterGroup>

    <Task>      
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Text" />
      <Code Type="Method" Language="C#">
        <![CDATA[
        IEnumerable<KeyValuePair<string, string>> EnumerateKeysValues(string path)
        {
          var separators = new char[] { '\t', '"' };
          using (StreamReader sr = File.OpenText(path)
          {
            string line;
            while ((line = sr.ReadLine()) != null)
            {
              int discard;
              var split = line.Split(separators, StringSplitOptions.RemoveEmptyEntries);
              if (split.Length != 2 || !int.TryParse(split[0], out discard))
                continue;
                
              yield return new KeyValuePair<string, string>(split[0], split[1]);
            }
          }
        }

        List<string> GetSteamLibraryLocations()
        {
          var steamFolders = new List<string>();
          
          steamFolders.Add(SteamLocation);
          
          var configurationFile = Path.Combine(SteamLocation, "steamapps", "libraryfolders.vdf");
          foreach (var kvp in EnumerateKeysValues(configurationFile)) {
            int discard;
            if (int.TryParse(kvp.Key, out discard))
              steamFolders.Add(kvp.Value);
          }
          
          foreach (var f in steamFolders) {
            Log.LogMessage("Steam library folder: {0}", f);
          }
          
          return steamFolders;
        }
        
        public override bool Execute()
        {
          if (!Directory.Exists(SteamLocation)) {
            Log.LogError("Steam library folder '{0}' does not exist", SteamLocation);
            return false;
          }

          var gameAcfFileName = string.Format("appmanifest_{0}.acf", GameId);
          var gameAcf = GetSteamLibraryLocations()
            .Select(folder => Path.Combine(folder, "steamapps", gameAcfFileName))
            .First(file => File.Exists(file));
            
          var sep = Path.DirectorySeparatorChar.ToString();
          foreach (var kvp in EnumerateKeysValues(gameAcf)) {
            if (!"installdir".Equals(key, StringComparison.OrdinalIgnoreCase))
              continue;
            
            var value = value.Replace(sep + sep, sep);
            var steamDir = Path.GetDirectoryName(gameAcf);
            var gameDir = Path.Combine(steamDir, "common", value);
            if (!Directory.Exists(gameDir))
              continue;
              
            if (!gameDir.EndsWith(sep)) {
              gameDir += sep;
            }
            Result = gameDir;
            return true;
          }
          
          Log.LogError("Could not find Steam Game ID: {0}", GameId);
          return false;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="FindSteamGame"
          Inputs="$(MSBuildAllProjects);$(SteamGameInstallLocation)"
          Outputs="$(SteamGameCacheFile)"
          Condition="!Exists('$(SteamGameInstallLocation)')">
    <Error Text="'SteamGameId' prop not set" Condition=" '$(SteamGameId)' == '' " />

    <Message Importance="high" Text="Resolving Steam install location from Disk" />
    <FindSteamGameInstallLocation
      SteamLocation="$(registry:HKEY_LOCAL_MACHINE\SOFTWARE\Valve\Steam@InstallPath)\"
      GameId="$(SteamGameId)">
      <Output TaskParameter="Result" PropertyName="SteamGameInstallLocation" />
    </FindSteamGameInstallLocation>

    <Message Importance="high" Text="Found Steam Install $(SteamGameInstallLocation)" />

    <WriteLinesToFile File="$(SteamGameCacheFile)" Lines="$(SteamGameInstallLocation)" Overwrite="true" WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <FileWrites Include="$(SteamGameCacheFile)" />
    </ItemGroup>
  </Target>
</Project>