<Project>
  <PropertyGroup>
    <OutputPath>$(SteamGameInstallLocation)BepInEx\plugins\$(Company)-$(AssemblyName)\</OutputPath>
    <OutDir>$(OutputPath)</OutDir>
    
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);ResolveBepInExReferences</PrepareForBuildDependsOn>
  </PropertyGroup>

  <!-- Generate PluginInfo.cs for plugins -->
  <Target Name="GeneratePluginVersionInfo"
          DependsOnTargets="GitSetVersions"
          BeforeTargets="BeforeCompile;CoreCompile"
          Inputs="$(MSBuildAllProjects)"
          Outputs="$(IntermediateOutputPath)$(MSBuildProjectName).PluginInfo.g.cs">
    <PropertyGroup>
      <PluginInfoFile>$(IntermediateOutputPath)$(MSBuildProjectName).PluginInfo.g.cs</PluginInfoFile>
      <PluginInfoContent>
        <![CDATA[
partial class ThisAssembly
{
    public partial class Plugin
    {
      public const string Authors = "org.$(Company).dsp"%3B
      public const string GUID = Authors + ".$(AssemblyName)"%3B
      public const string Name = "$(AssemblyTitle)"%3B
      public const string Version = "$(GitSemVerFile)"%3B
      public const string HarmonyGUID = GUID + Version%3B
    }
}
]]>
      </PluginInfoContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(PluginInfoFile)"
                      Lines="$(PluginInfoContent)"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <Compile Remove="$(PluginInfoFile)" />
      <Compile Include="$(PluginInfoFile)" />
      <FileWrites Include="$(PluginInfoFile)" />
    </ItemGroup>
  </Target>
  
  <Target Name="ResolveBepInExReferences"
          DependsOnTargets="FindSteamGame">

    <PropertyGroup>
      <PluginsPath>$(SteamGameInstallLocation)BepInEx\plugins\</PluginsPath>
      <OutputPath>$(PluginsPath)\$(Company)-$(AssemblyName)\</OutputPath>
      <OutDir>$(OutputPath)</OutDir>
    </PropertyGroup>

    <ItemGroup>
      <Reference Include="@(BIEReference->'$(SteamGameInstallLocation)BepInEx\core\%(Identity)')"
                 Private="False"
                 SpecificVersion="true" />
    </ItemGroup>
  </Target>

  <!-- Resolve PluginReference items -->
  <PropertyGroup>
    <!-- Inject into references resolving -->
    <ResolveAssemblyReferencesDependsOn>ResolveBepInExPluginReferences;$(ResolveAssemblyReferencesDependsOn)</ResolveAssemblyReferencesDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="ResolveBepInExPluginAssemblies"
             TaskFactory="RoslynCodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <!-- This should contain game install locations and thunderstore profiles -->
      <InstalledPlugins ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <PluginAssemblies ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>

    <Task>      
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Reflection" />
      <Using Namespace="System.Text" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Method" Language="C#">
        <![CDATA[
        public override bool Execute()
        {
          var assemblies = new List<ITaskItem>(InstalledPlugins.Length);

          foreach (var plugin in InstalledPlugins)
          {
            var directory = plugin.GetMetadata("InstallDir");
            int added = 0;

            foreach (var assemblyFile in Directory.EnumerateFiles(directory, "*.dll")) {
              try {
                var assemblyName = AssemblyName.GetAssemblyName(assemblyFile);
              
                var assembly = new TaskItem(assemblyFile);

                assemblies.Add(assembly);
                added++;
                
                Log.LogMessage("Added assembly '{0}'", assemblyFile);
              } catch (Exception e) {
                Log.LogWarning("File could not be processed as an assembly '{0}' {1}", assemblyFile, e);
              }
            }
            
            if (added == 0) {
                Log.LogWarning("Did not find any assembly in '{0}'", directory);
            }
          }
          
          PluginAssemblies = assemblies.ToArray();
          return true;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="ResolveBepInExPluginReferences"
          Returns="@(Reference)"
          DependsOnTargets="FindSteamGame"
          Condition=" '@(PluginReference)' != '' ">

    <!-- Steam install lookup of plugins -->
    <PropertyGroup>
      <PluginsPath>$(SteamGameInstallLocation)BepInEx\plugins\</PluginsPath>
      <!-- TODO DSP store, local build: how to ensure it's installed though? -->
    </PropertyGroup>

    <ItemGroup Label="Plugin dependency resolution for one level only">
      <!--
        Missing support for building a plugin if exists in solution
        Workaround: ProjectReference ReferenceOutputAssembly=false
      -->

      <UnresolvedPluginReference Include="@(PluginReference)" />

      <!-- Try resolving from project -->
      <PluginAssemblyReference Include="@(UnresolvedPluginReference)"
                               Condition=" '%(Author)' != '' AND Exists('$(PluginsPath)\%(Author)-%(Identity)\') ">
        <InstallDir>$(PluginsPath)%(Author)-%(Identity)\</InstallDir>
      </PluginAssemblyReference>
      <UnresolvedPluginReference Remove="@(PluginAssemblyReference)" />
      
      <!-- Try resolving from author and plugin -->
      <PluginAssemblyReference Include="@(UnresolvedPluginReference)"
                               Condition=" '%(Author)' != '' AND Exists('$(PluginsPath)\%(Author)-%(Identity)\') ">
        <InstallDir>$(PluginsPath)%(Author)-%(Identity)\</InstallDir>
      </PluginAssemblyReference>
      <UnresolvedPluginReference Remove="@(PluginAssemblyReference)" />

      <PluginAssemblyReference Include="@(UnresolvedPluginReference)"
                               Condition=" '%(Author)' == '' AND Exists('$(PluginsPath)\%(Identity)\') ">
        <InstallDir>$(PluginsPath)%(Identity)\</InstallDir>
      </PluginAssemblyReference>
      <UnresolvedPluginReference Remove="@(PluginAssemblyReference)" />
    </ItemGroup>
    
    <ResolveBepInExPluginAssemblies InstalledPlugins="@(PluginAssemblyReference)">
      <Output TaskParameter="PluginAssemblies"
              ItemName="ResolvedPluginAssemblyReference" />
    </ResolveBepInExPluginAssemblies>

    <ItemGroup>
      <!-- TODO: Parse manifest or assembly to get dependency real name or dependencies -->
      <ReferencePath Include="@(ResolvedPluginAssemblyReference)"
                     Private="false"
                     SpecificVersion="true" />
    </ItemGroup>
    
    <Warning Text="Could not resolve plugin reference '%(UnresolvedPluginReference.Identity)' " Condition=" '%(UnresolvedPluginReference.Identity)' != '' " />
  </Target>

</Project>