<Project>
  <PropertyGroup>
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);ResolveUnityReferences;BackupGameBinaries</PrepareForBuildDependsOn>
  </PropertyGroup>
  
  <Target Name="ResolveUnityReferences"
          Returns="@(Reference)"
          DependsOnTargets="FindSteamGame">
    <PropertyGroup>
      <UnityAssembliesPath>$(SteamGameInstallLocation)$(UnityGameName)_Data\Managed\</UnityAssembliesPath>
    </PropertyGroup>

    <ItemGroup>
      <Reference Include="@(UnityReference->'$(UnityAssembliesPath)%(Identity)')" Private="False" SpecificVersion="true"/>
    </ItemGroup>
  </Target>

  <UsingTask TaskName="ParseGameVersionFile"
           TaskFactory="RoslynCodeTaskFactory"
           AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <!-- This should contain game install locations and thunderstore profiles -->
      <GameVersionFile ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <GameVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Reflection" />
      <Using Namespace="System.Text" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Method" Language="C#">
        <![CDATA[
        public override bool Execute()
        {
          var lines = File.ReadAllLines(GameVersionFile.ItemSpec);
          if (lines.Length >= 2) {
            if (lines[0].Trim() == "1") {
              GameVersion = lines[1];
              return true;
            }
          }
          
          Log.LogWarning("Could not parse VERSION file '{0}'", string.Join(Environment.NewLine, lines));
          return false;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="ResolveGameVersion"
          Returns="@(GameVersionFile)"
          DependsOnTargets="FindSteamGame">
    <ParseGameVersionFile GameVersionFile="$(SteamGameInstallLocation)VERSION">
      <Output TaskParameter="GameVersion" PropertyName="GameVersion" />
    </ParseGameVersionFile>

    <ItemGroup>
      <GameVersionFile Include="$(GameVersionBackup)$(GameVersion)\VERSION" />
    </ItemGroup>
    
    <Copy SourceFiles="$(SteamGameInstallLocation)VERSION"
          DestinationFiles="@(GameVersionFile)"
          Retries="5"
          RetryDelayMilliseconds="100"
          SkipUnchangedFiles="true" />
  </Target>

  <Target Name="BackupGameBinaries"
          Inputs="@(GameVersionFile);@(GameBackupFile->'$(SteamGameInstallLocation)%(Identity)')"
          Outputs="$(GameVersionBackup)\$(GameVersion)\"
          DependsOnTargets="FindSteamGame;ResolveGameVersion">
    <ItemGroup>
      <GameBackupFile Include="$(UnityGameName).exe" />
      <GameBackupFile Include="UnityPlayer.dll" />
      <GameBackupFile Include="WinPixEventRuntime.dll" />
      <GameBackupFile Include="VERSION" />
      <GameBackupFile Include="$(UnityGameName)_Data\boot.config" />
    </ItemGroup>

    <Copy SourceFiles="@(GameBackupFile->'$(SteamGameInstallLocation)%(Identity)')"
          DestinationFiles="@(GameBackupFile->'$(GameVersionBackup)$(GameVersion)\%(Identity)')"
          Retries="5"
          RetryDelayMilliseconds="100"
          SkipUnchangedFiles="true" />
  </Target>

  <Target Name="PublishGameXmlDocumentation"
          DependsOnTargets="FindSteamGame"
          AfterTargets="AfterBuild"
          Inputs="$(MSBuildThisFileDirectory)..\docs\Assembly-CSharp.xml"
          Outputs="$(SteamGameInstallLocation)$(UnityGameName)_Data\Managed\Assembly-CSharp.xml">
  </Target>
</Project>